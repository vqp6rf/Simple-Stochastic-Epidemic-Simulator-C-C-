{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
#include <stdio.h>\
#include <stdlib.h>\
#include <math.h>\
#include <time.h>\
#include "random.h"\
#include "virus.h"\
int catch_or_not ( double tprob, int npeople, int status[] ) \{\
  int nexposures;\
  int otherperson;\
  nexposures = 20*rand01();\
  for (int i=0;i<nexposures;i++)\{\
      otherperson = rand01() * npeople;\
      if (status[otherperson]>0)\{\
          if (rand01()<tprob)\{\
              return 1;\
          \}\
      \}\
  \}\
  return is_susceptible;\
\}\
int die_or_not ( double dprob, int sick_days, int person, int npeople, int status[] ) \{\
  if (rand01()<dprob)\{\
      return is_dead;\
  \}\
  if ( status[person] > sick_days + 3.0*normal() ) \{\
      return is_recovered;\
  \}\
  else \{\
      return status[person]+1;\
  \}\
\}\
int main ( int argc, char *argv[] ) \{\
  const int npeople=1e+4;\
  int status[npeople];\
  double sum=0;\
  double sum2=0;\
  int trial;\
  int ntrials=1000;\
  int newstatus[npeople];\
  int day,person;\
  double vprob; // Vaccination probability.\
  double tprob; // Transmission probability\
  double dprob = 0.015; // Death probability per day\
  int ndays = 100;\
  int initial_infections = 0.01*npeople;\
  int sick_days = 14;\
  FILE *output;\
  if (argc!=4)\{\
      printf("The program is only allowed 4 command line arguments \\n");\
      return 2; \
  \}\
  vprob=atof(argv[1]);\
  tprob=atof(argv[2]);\
    output = fopen( argv[3], "w" );\
    nvaccinated = vprob*npeople;\
    for ( trial=0; trial<ntrials; trial++ ) \{\
        if (trial%10==0)\{\
            printf("Processing trial %d\\n",trial);\
        \}\
        initialize_status( npeople, initial_infections, nvaccinated, status );\
        for ( day=0; day<ndays; day++ ) \{\
            for ( person=0; person<npeople; person++ ) \{\
                if (status[person]==is_susceptible)\{\
                    newstatus[person] = catch_or_not( tprob, npeople, status );\
                \}\
                else if (status[person] > 0)\{\
                    newstatus[person] = die_or_not( dprob, sick_days, person, npeople, status );\
                \}\
                else \{\
                    newstatus[person] = status[person];\
                \}\
            \}\
            update_status( npeople, status, newstatus );\
        \}\
        sum+=ndead;\
        sum2+=ndead*ndead;\
        fprintf ( output, "%d %d %d %d %d %d\\n",\
         trial, nsusceptible, nrecovered, nvaccinated, ninfected, ndead );\
    \}\
  printf ( "Population: %d\\n", npeople );\
  printf ( "Vaccination Probability: %lf\\n", vprob );\
  printf ( "Transmission Probability: %lf\\n", tprob );\
  printf ( "Initial Infections: %d\\n", initial_infections );\
  printf ( "Simulation Period: %d days\\n", ndays );\
  printf ( "The number of trials: %d\\n", ntrials );\
  double average= (double)sum/ntrials;\
  printf ( "The average number of deaths at the end of each trial: %lf\\n", average );\
  printf ( "The standard deviation of this number: %lf\\n", sqrt((sum2-ntrials*average*average)/(ntrials-1) ));\
\}}